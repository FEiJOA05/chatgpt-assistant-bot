
import os
import asyncio
import requests
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEY = os.getenv("OPENAI_API_KEY")
API_URL = "https://api.groq.com/openai/v1/chat/completions"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_data = {}

def get_user_goals(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data:
        user_data[user_id] = {"goals": []}
    return user_data[user_id]["goals"]

def add_user_goal(user_id, goal):
    """–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if user_id not in user_data:
        user_data[user_id] = {"goals": []}
    user_data[user_id]["goals"].append(goal)

def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ú–æ–∏ —Ü–µ–ª–∏", callback_data="goals")],
        [InlineKeyboardButton(text="üìà –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å", callback_data="add_goal")]
    ])

def ask_ai(question):
    """–ó–∞–ø—Ä–æ—Å –∫ –ò–ò"""
    try:
        headers = {
            "Authorization": f"Bearer {API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "model": "llama3-70b-8192",
            "messages": [
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π."},
                {"role": "user", "content": question}
            ],
            "max_tokens": 500,
            "temperature": 0.7
        }
        
        response = requests.post(API_URL, headers=headers, json=data)
        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"]
        else:
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò"
    except:
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_name = message.from_user.first_name
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n–Ø –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ü–µ–ª—è–º. –ú–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å—Ç–∞–≤–∏—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–ª–∏!",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(F.data == "goals")
async def show_goals(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    goals = get_user_goals(user_id)
    
    if not goals:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π ü´•"
    else:
        text = "üéØ –í–∞—à–∏ —Ü–µ–ª–∏:\n\n"
        for i, goal in enumerate(goals, 1):
            text += f"{i}. {goal}\n"
    
    await callback.message.edit_text(text, reply_markup=get_main_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "add_goal")
async def add_goal_prompt(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìà –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤—É—é —Ü–µ–ª—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data == "back")
async def back_to_main(callback: types.CallbackQuery):
    user_name = callback.from_user.first_name
    await callback.message.edit_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n–Ø –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ü–µ–ª—è–º. –ú–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å—Ç–∞–≤–∏—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–ª–∏!",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.message(F.text)
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user_text = message.text
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Ü–µ–ª—å—é
    if any(word in user_text.lower() for word in ["—Ö–æ—á—É", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Ü–µ–ª—å", "–±—É–¥—É", "—Å–æ–±–∏—Ä–∞—é—Å—å"]):
        add_user_goal(user_id, user_text)
        await message.answer(
            f"‚úÖ –¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {user_text}",
            reply_markup=get_main_keyboard()
        )
    else:
        # –û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫ –ò–ò
        response = ask_ai(user_text)
        await message.answer(response, reply_markup=get_main_keyboard())

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot, drop_pending_updates=True)

if __name__ == '__main__':
    asyncio.run(main())
