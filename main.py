import os
from openai import OpenAI
from openai.types.chat import ChatCompletionMessageParam, ChatCompletionSystemMessageParam, ChatCompletionUserMessageParam
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler,
                          filters, CallbackQueryHandler, ContextTypes)
import typing

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

print(f"BOT_TOKEN –Ω–∞–π–¥–µ–Ω: {'–î–∞' if BOT_TOKEN else '–ù–µ—Ç'}")
print(f"OPENAI_API_KEY –Ω–∞–π–¥–µ–Ω: {'–î–∞' if OPENAI_API_KEY else '–ù–µ—Ç'}")

if not OPENAI_API_KEY:
    print("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ OpenAI.")
    client = None
else:
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)
        print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
        client = None

user_memory = {}


# üü¢ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üöÄ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    if update.effective_user:
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})")
        
        user_memory[user_id] = {"name": user_name}
        keyboard = [
            [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask")],
            [InlineKeyboardButton("üß† –ü–æ–º–æ—â—å", callback_data="help")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.message:
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, {user_memory[user_id]['name']}! –Ø —Ç–≤–æ–π Telegram GPT-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.",
                reply_markup=reply_markup)
            print("‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏")
        else:
            print("‚ùå update.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        print("‚ùå update.effective_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"üîî handle_button –≤—ã–∑–≤–∞–Ω!")
    print(f"üîç Update –æ–±—ä–µ–∫—Ç: {update}")
    print(f"üîç –ï—Å—Ç—å –ª–∏ callback_query: {hasattr(update, 'callback_query') and update.callback_query is not None}")
    
    query = update.callback_query
    if query:
        print(f"üîò –ü–æ–ª—É—á–µ–Ω callback_query —Å –¥–∞–Ω–Ω—ã–º–∏: '{query.data}'")
        print(f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query.from_user.first_name if query.from_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}")
        print(f"üì± ID —á–∞—Ç–∞: {query.message.chat.id if query.message else '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'}")
        
        try:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await query.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
            print("‚úÖ query.answer() –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            if query.data == "help":
                new_text = "üß† –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ó–∞–¥–∞–≤–∞–π –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ–º–æ–≥—É –ø–æ —É—á–µ–±–µ, –∫–æ–¥—É, –∏–¥–µ—è–º!\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É."
                await query.edit_message_text(text=new_text)
                print("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–º–æ—â—å")
            elif query.data == "ask":
                new_text = "üí¨ –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å—é–¥–∞ üëá\n\n–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!"
                await query.edit_message_text(text=new_text)
                print("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É")
            else:
                print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {query.data}")
                await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_button: {e}")
            print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            traceback.print_exc()
    else:
        print("‚ùå callback_query –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ update")
        print(f"‚ùå –ß—Ç–æ –µ—Å—Ç—å –≤ update: {dir(update)}")


# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∫ –∑–∞–ø—Ä–æ—Å –≤ GPT)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
        
    user_input = update.message.text or ""
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_input[:50]}...")
    
    if not client:
        reply = "‚ùå OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY –≤ Secrets."
        await update.message.reply_text(reply)
        return
    
    reply = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
    
    try:
        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ OpenAI...")
        messages: list[ChatCompletionMessageParam] = typing.cast(list[ChatCompletionMessageParam], [
            ChatCompletionSystemMessageParam(role="system", content="–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."),
            ChatCompletionUserMessageParam(role="user", content=user_input)
        ])
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=1000,
            temperature=0.7
        )
        
        if response.choices and response.choices[0].message.content:
            reply = response.choices[0].message.content
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
        else:
            reply = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI."
            print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
            
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {str(e)}"
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
    
    await update.message.reply_text(reply)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def log_all_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {type(update).__name__}")
    if update.message:
        print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
    if update.callback_query:
        print(f"üîò Callback: {update.callback_query.data}")

# –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
async def debug_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞: {type(update).__name__}")
    if update.message:
        print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
    if update.callback_query:
        print(f"üîò Callback query: {update.callback_query.data}")
        print(f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.callback_query.from_user.first_name if update.callback_query.from_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}")

if __name__ == '__main__':
    if BOT_TOKEN is None:
        raise ValueError("BOT_TOKEN environment variable not set.")

    print(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: {BOT_TOKEN[:10]}...")
    
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    print("üìã –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...")
    
    # 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    print("  ‚úÖ CommandHandler –¥–ª—è /start –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π)
    callback_handler = CallbackQueryHandler(handle_button)
    app.add_handler(callback_handler)
    print("  ‚úÖ CallbackQueryHandler –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("  ‚úÖ MessageHandler –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # 4. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π)
    from telegram.ext import TypeHandler
    app.add_handler(TypeHandler(Update, debug_handler), group=1)
    print("  ‚úÖ Debug handler –¥–æ–±–∞–≤–ª–µ–Ω")
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    try:
        app.run_polling(drop_pending_updates=True, poll_interval=1.0, timeout=10)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        if "Conflict" in str(e):
            print("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
            print("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            exit(1)
        else:
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            exit(1)