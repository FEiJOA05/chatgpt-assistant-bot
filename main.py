import os
from openai import OpenAI
from openai.types.chat import ChatCompletionMessageParam, ChatCompletionSystemMessageParam, ChatCompletionUserMessageParam
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler,
                          filters, CallbackQueryHandler, ContextTypes)
import typing

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

print(f"BOT_TOKEN –Ω–∞–π–¥–µ–Ω: {'–î–∞' if BOT_TOKEN else '–ù–µ—Ç'}")
print(f"OPENAI_API_KEY –Ω–∞–π–¥–µ–Ω: {'–î–∞' if OPENAI_API_KEY else '–ù–µ—Ç'}")

if not OPENAI_API_KEY:
    print("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ OpenAI.")
    client = None
else:
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)
        print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
        client = None

user_memory = {}


# üü¢ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user:
        user_id = update.effective_user.id
        user_memory[user_id] = {"name": update.effective_user.first_name}
        keyboard = [
            [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask")],
            [InlineKeyboardButton("üß† –ü–æ–º–æ—â—å", callback_data="help")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.message:
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, {user_memory[user_id]['name']}! –Ø —Ç–≤–æ–π Telegram GPT-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.",
                reply_markup=reply_markup)
    else:
        return


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
        await query.answer()
        if query.data == "help":
            await query.edit_message_text(
                "–Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ó–∞–¥–∞–≤–∞–π –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–æ–º–æ–≥—É –ø–æ —É—á–µ–±–µ, –∫–æ–¥—É, –∏–¥–µ—è–º!")
            print("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–º–æ—â—å")
        elif query.data == "ask":
            await query.edit_message_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å—é–¥–∞ üëá")
            print("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å—É")


# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∫ –∑–∞–ø—Ä–æ—Å –≤ GPT)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
        
    user_input = update.message.text or ""
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_input[:50]}...")
    
    if not client:
        reply = "‚ùå OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY –≤ Secrets."
        await update.message.reply_text(reply)
        return
    
    reply = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
    
    try:
        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ OpenAI...")
        messages: list[ChatCompletionMessageParam] = typing.cast(list[ChatCompletionMessageParam], [
            ChatCompletionSystemMessageParam(role="system", content="–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."),
            ChatCompletionUserMessageParam(role="user", content=user_input)
        ])
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=1000,
            temperature=0.7
        )
        
        if response.choices and response.choices[0].message.content:
            reply = response.choices[0].message.content
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
        else:
            reply = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI."
            print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
            
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {str(e)}"
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
    
    await update.message.reply_text(reply)

if __name__ == '__main__':
    if BOT_TOKEN is None:
        raise ValueError("BOT_TOKEN environment variable not set.")

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND,
                                   handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        app.run_polling(drop_pending_updates=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        if "Conflict" in str(e):
            print("–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
            print("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            exit(1)
        else:
            print("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            exit(1)